(function (b) {
    function a(n, U) {
        function K() {
            ad.settings.shuffle && ac.sort(function () {
                return 0.5 - Math.random()
            });
            if (ad.settings.preloadPanels) {
                u();
                for (var g = 0, j = ac.length, h = 0; h < j; h++) {
                    b("<img/>").load(function () {
                        g++;
                        if (g == j) {
                            N.find(".preloader").remove();
                            e()
                        }
                    }).attr("src", ac[h].path)
                }
            } else {
                e()
            }
        }
        function e() {
            L = ac.length;
            aa = ad.settings.columns;
            D = Math.ceil(L / aa);
            w = (ad.settings.width - (aa - 1) * ad.settings.distance) / ad.settings.columns;
            C = (ad.settings.height - (D - 1) * ad.settings.distance) / Math.ceil(L / ad.settings.columns);
            l = ad.settings.width - (aa - 1) * (ad.settings.closedPanelWidth + ad.settings.distance);
            i = ad.settings.height - (D - 1) * (ad.settings.closedPanelHeight + ad.settings.distance);
            var g = b('<div class="panel"></div>').appendTo(N);
            O = (isNaN(parseInt(g.css("borderLeftWidth"))) ? 0 : parseInt(g.css("borderLeftWidth"))) + (isNaN(parseInt(g.css("borderRightWidth"))) ? 0 : parseInt(g.css("borderRightWidth")));
            J = (isNaN(parseInt(g.css("borderTopWidth"))) ? 0 : parseInt(g.css("borderTopWidth"))) + (isNaN(parseInt(g.css("borderBottomWidth"))) ? 0 : parseInt(g.css("borderBottomWidth")));
            g.remove();
            for (g = 0; g < L; g++) {
                V(g)
            }
            ad.settings.slideshow && f();
            N.hover(function () {
                ad.settings.slideshow && ad.settings.stopSlideshowOnHover && B && clearInterval(B)
            }, function () {
                ad.settings.closePanelOnMouseOut && ae();
                ad.settings.slideshow && ad.settings.stopSlideshowOnHover && f()
            })
        }
        function V(g) {
            var j = b('<div class="panel"></div>').appendTo(N);
            ab.push(j);
            ac[g].width = l;
            ac[g].height = i;
            b("<img/>").load(function () {
                ab[g].css("background-image", "url(" + b(this).attr("src") + ")");
                switch (ac[g].properties.alignType) {
                    case "leftTop":
                        ab[g].css("background-position", "left top");
                        break;
                    case "leftCenter":
                        ab[g].css("background-position", "left center");
                        break;
                    case "leftBottom":
                        ab[g].css("background-position", "left bottom");
                        break;
                    case "centerTop":
                        ab[g].css("background-position", "center top");
                        break;
                    case "centerCenter":
                        ab[g].css("background-position", "center center");
                        break;
                    case "centerBottom":
                        ab[g].css("background-position", "center bottom");
                        break;
                    case "rightTop":
                        ab[g].css("background-position", "right top");
                        break;
                    case "rightCenter":
                        ab[g].css("background-position", "right center");
                        break;
                    case "rightBottom":
                        ab[g].css("background-position", "right bottom");
                        break;
                    case "default":
                        ab[g].css("background-position", "left top")
                }
                ad.settings.shadow && b('<div class="shadow"></div>').appendTo(j);
                ac[g].width = b(this).attr("width") || b(this).prop("width");
                ac[g].height = b(this).attr("height") || b(this).prop("height");
                var m = {
                    type: "panelLoaded",
                    index: g,
                    data: ac[g]
                };
                b.isFunction(ad.settings.panelLoaded) && ad.settings.panelLoaded.call(this, m)
            }).attr("src", ac[g].path);
            j.css("width", w - O);
            j.css("height", C - J);
            j.css("left", g % aa * (w + ad.settings.distance));
            j.css("top", Math.floor(g / aa) * (C + ad.settings.distance));
            j.hover(function () {
                if (ad.settings.openPanelOnMouseOver) {
                    z && clearTimeout(z);
                    z = setTimeout(function () {
                        y(g)
                    }, ad.settings.openPanelDelay)
                }
                var m = {
                    type: "panelMouseOver",
                    index: g,
                    data: ac[g]
                };
                b.isFunction(ad.settings.panelMouseOver) && ad.settings.panelMouseOver.call(this, m)
            }, function () {
                var m = {
                    type: "panelMouseOut",
                    index: g,
                    data: ac[g]
                };
                b.isFunction(ad.settings.panelMouseOut) && ad.settings.panelMouseOut.call(this, m)
            });
            ac[g].link && j.css("cursor", "pointer");
            j.click(function () {
                ad.settings.openPanelOnClick && y(g);
                ac[g].link && window.open(ac[g].link, ac[g].properties.linkTarget);
                var m = {
                    type: "panelClick",
                    index: g,
                    data: ac[g]
                };
                b.isFunction(ad.settings.panelClick) && ad.settings.panelClick.call(this, m)
            });
            var h = {
                type: "panelCreated",
                index: g,
                data: ac[g]
            };
            b.isFunction(ad.settings.panelCreated) && ad.settings.panelCreated.call(this, h);
            if (g == ac.length - 1) {
                h = {
                    type: "allPanelsCreated"
                };
                b.isFunction(ad.settings.allPanelsCreated) && ad.settings.allPanelsCreated.call(this, h)
            }
        }
        function y(S) {
            if (!(Y == S && v == "opened")) {
                v = "opened";
                Y != -1 && ab[Y].stop();
                Y = S;
                var P = {
                    type: "openPanel",
                    index: S,
                    data: ac[S]
                };
                b.isFunction(ad.settings.openPanel) && ad.settings.openPanel.call(this, P);
                d();
                var M = false;
                P = ab[Y];
                var Q, H;
                if (ad.settings.openedPanelWidth == "auto") {
                    Q = l;
                    for (var R = 0; R < L; R++) {
                        if (R % aa == Y % aa) {
                            Q = Math.min(Q, ac[R].width)
                        }
                    }
                } else {
                    Q = ad.settings.openedPanelWidth == "max" ? ac[Y].width : ad.settings.openedPanelWidth
                }
                if (ad.settings.openedPanelHeight == "auto") {
                    H = i;
                    for (R = 0; R < L; R++) {
                        if (Math.floor(R / aa) == Math.floor(Y / aa)) {
                            H = Math.min(H, ac[R].height)
                        }
                    }
                } else {
                    H = ad.settings.openedPanelHeight == "max" ? ac[Y].height : ad.settings.openedPanelHeight
                }
                var F = (ad.settings.width - (aa - 1) * ad.settings.distance - Q) / (aa - 1),
                    r = (ad.settings.height - (D - 1) * ad.settings.distance - H) / (D - 1),
                    E = {}, x = [],
                    A = [],
                    t = [],
                    s = [],
                    G = [],
                    I = [],
                    g = [],
                    h = [],
                    q;
                for (R = 0; R < L; R++) {
                    A[R] = parseFloat(ab[R].css("width"));
                    s[R] = parseFloat(ab[R].css("height"));
                    I[R] = parseFloat(ab[R].css("left"));
                    h[R] = parseFloat(ab[R].css("top"));
                    if (R == Y) {
                        x[R] = Q - O;
                        t[R] = H - J
                    } else {
                        x[R] = R % aa == Y % aa ? Math.min(Q - O, ac[R].width) : F - O;
                        t[R] = Math.floor(R / aa) == Math.floor(Y / aa) ? Math.min(H - J, ac[R].height) : r - J
                    }
                    G[R] = R % aa * (F + ad.settings.distance) + (R % aa <= Y % aa ? 0 : Q - F) + (R % aa == Y % aa && Q - O > x[R] ? (Q - O - x[R]) / 2 : 0);
                    g[R] = Math.floor(R / aa) * (r + ad.settings.distance) + (Math.floor(R / aa) <= Math.floor(Y / aa) ? 0 : H - r) + (Math.floor(R / aa) == Math.floor(Y / aa) && H - J > t[R] ? (H - J - t[R]) / 2 : 0)
                }
                var j, p, m;
                if (parseFloat(P.css("width")) != Q - O) {
                    j = parseFloat(P.css("width"));
                    p = Q;
                    m = O;
                    E.width = p - m
                } else {
                    j = parseFloat(P.css("height"));
                    p = H;
                    m = J;
                    E.height = p - m
                }
                P.stop();
                P.animate(E, {
                    duration: ad.settings.slideDuration,
                    complete: function () {
                        if (!M) {
                            M = true;
                            if (ac[S].caption) {
                                var ag = ac[S].caption,
                                    af = ac[Y].properties,
                                    W = parseInt(af.captionFadeDuration),
                                    Z = parseInt(af.captionWidth),
                                    T = parseInt(af.captionHeight),
                                    X = parseInt(af.captionTop);
                                af = parseInt(af.captionLeft);
                                Z = b('<div class="caption"></div>').css({
                                    width: Z,
                                    height: T,
                                    left: af,
                                    top: X,
                                    opacity: 0
                                }).appendTo(ab[Y]);
                                T = b('<div class="caption-background"></div>').css({
                                    width: "100%",
                                    height: "100%"
                                }).appendTo(Z);
                                b("<p></p>").html(ag).css({
                                    width: "100%",
                                    height: "100%",
                                    opacity: 1
                                }).appendTo(T);
                                Z.animate({
                                    opacity: 1
                                }, W)
                            }
                            ag = {
                                type: "animationComplete"
                            };
                            b.isFunction(ad.settings.animationComplete) && ad.settings.animationComplete.call(this, ag)
                        }
                    },
                    step: function (T) {
                        q = (T - j) / (p - m - j);
                        for (T = 0; T < L; T++) {
                            ab[T].css("width", q * (x[T] - A[T]) + A[T]);
                            ab[T].css("height", q * (t[T] - s[T]) + s[T]);
                            ab[T].css("left", q * (G[T] - I[T]) + I[T]);
                            ab[T].css("top", q * (g[T] - h[T]) + h[T])
                        }
                    }
                })
            }
        }
        function ae() {
            v = "closed";
            z && clearTimeout(z);
            d();
            for (var A = false, r = ab[Y], q = parseFloat(r.css("width")), s = {}, p = [], t = [], j = [], x = [], h = [], G = [], g = [], F = [], E, m = 0; m < L; m++) {
                t[m] = parseFloat(ab[m].css("width"));
                x[m] = parseFloat(ab[m].css("height"));
                p[m] = w - O;
                j[m] = C - J;
                G[m] = parseFloat(ab[m].css("left"));
                F[m] = parseFloat(ab[m].css("top"));
                h[m] = m % aa * (w + ad.settings.distance);
                g[m] = Math.floor(m / aa) * (C + ad.settings.distance)
            }
            s.width = w - O;
            r.stop();
            r.animate(s, {
                duration: ad.settings.slideDuration,
                complete: function () {
                    if (!A) {
                        A = true;
                        var H = {
                            type: "animationComplete"
                        };
                        b.isFunction(ad.settings.animationComplete) && ad.settings.animationComplete.call(this, H)
                    }
                },
                step: function (H) {
                    E = (q - H) / (q - w + O);
                    for (H = 0; H < L; H++) {
                        ab[H].css("width", E * (p[H] - t[H]) + t[H]);
                        ab[H].css("height", E * (j[H] - x[H]) + x[H]);
                        ab[H].css("left", E * (h[H] - G[H]) + G[H]);
                        ab[H].css("top", E * (g[H] - F[H]) + F[H])
                    }
                }
            })
        }
        function c() {
            y(Y == ac.length - 1 ? 0 : Y + 1)
        }
        function k() {
            y(Y == 0 ? ac.length - 1 : Y - 1)
        }
        function u() {
            var g = b('<div class="preloader"></div>').hide().fadeIn(300).appendTo(N),
                j = (ad.settings.width - parseInt(g.css("width"))) * 0.5,
                h = (ad.settings.height - parseInt(g.css("height"))) * 0.5;
            g.css({
                left: j,
                top: h
            })
        }
        function d() {
            var g = N.find(".caption");
            g && g.stop().animate({
                opacity: 0
            }, 300, function () {
                g.remove()
            })
        }
        function f() {
            B = setInterval(function () {
                if (ad.settings.slideshowDirection == "next") {
                    c()
                } else {
                    ad.settings.slideshowDirection == "previous" && k()
                }
            }, ad.settings.slideshowDelay)
        }
        this.settings = b.extend({}, b.fn.gridAccordion.defaults, U);
        var N = b(n),
            ad = this,
            Y = -1,
            ac = [],
            ab = [],
            B = 0,
            o = ["captionFadeDuration", "captionWidth", "captionHeight", "captionTop", "captionLeft", "linkTarget", "alignType"],
            w, C, l, i, v = "closed",
            O = 0,
            J = 0,
            L = 0,
            aa, D, z;
        (function () {
            N.addClass("grid-accordion").css({
                width: ad.settings.width,
                height: ad.settings.height
            });
            if (ad.settings.xmlSource) {
                N.empty();
                b.ajax({
                    type: "GET",
                    url: ad.settings.xmlSource,
                    dataType: b.browser.msie ? "text" : "xml",
                    success: function (g) {
                        var h;
                        if (b.browser.msie) {
                            h = new ActiveXObject("Microsoft.XMLDOM");
                            h.async = false;
                            h.loadXML(g)
                        } else {
                            h = g
                        }
                        b(h).find("panel").each(function () {
                            var m = {};
                            m.properties = {};
                            for (var p = 0; p < b(this).children().length; p++) {
                                var j = b(this).children()[p];
                                m[j.nodeName] = b(this).find(j.nodeName).text()
                            }
                            for (p = 0; p < o.length; p++) {
                                j = o[p];
                                var q = b(this).attr(j);
                                m.properties[j] = q == undefined ? ad.settings[j] : q
                            }
                            ac.push(m)
                        });
                        K()
                    }
                })
            } else {
                N.children().each(function (h) {
                    var m = {};
                    m.properties = {};
                    for (var j = 0; j < b(this).children().length; j++) {
                        var p = b(this).children()[j];
                        if (b(p).is("a")) {
                            m.path = b(p).find("img").attr("src");
                            m.link = b(p).attr("href");
                            if (b(p).attr("target")) {
                                m.properties.linkTarget = b(p).attr("target")
                            }
                        } else {
                            if (b(p).is("img")) {
                                m.path = b(p).attr("src")
                            } else {
                                m[b(p).attr("class")] = b(p).html()
                            }
                        }
                    }
                    for (j = 0; j < o.length; j++) {
                        p = o[j];
                        var g;
                        if (ad.settings.panelProperties) {
                            if (ad.settings.panelProperties[h]) {
                                g = ad.settings.panelProperties[h][p]
                            }
                        }
                        m.properties[p] || (m.properties[p] = g == undefined ? ad.settings[p] : g)
                    }
                    ac.push(m)
                });
                N.empty();
                K()
            }
        })();
        this.nextPanel = c;
        this.previousSlide = k;
        this.openPanel = y;
        this.startSlideshow = function () {
            f()
        };
        this.stopSlideshow = function () {
            B && clearInterval(B)
        };
        this.getSlideshowState = function () {
            return slideshowState
        };
        this.getCurrentIndex = function () {
            return Y
        };
        this.getPanelAt = function (g) {
            return ac[g]
        };
        this.getAccordionState = function () {
            return v
        }
    }
    b.fn.gridAccordion = function (e) {
        for (var c = [], d = 0; d < this.length; d++) {
            if (!this[d].accordion) {
                this[d].accordion = new a(this[d], e);
                c.push(this[d].accordion)
            }
        }
        return c.length > 1 ? c : c[0]
    };
    b.fn.gridAccordion.defaults = {
        xmlSource: null,
        width: 500,
        height: 300,
        alignType: "leftTop",
        distance: 0,
        columns: 3,
        slideshow: false,
        slideshowDelay: 5000,
        slideshowDirection: "next",
        stopSlideshowOnHover: true,
        slideDuration: 700,
        openPanelOnMouseOver: true,
        closePanelOnMouseOut: true,
        openPanelOnClick: false,
        preloadPanels: false,
        shuffle: false,
        openedPanelWidth: "auto",
        openedPanelHeight: "auto",
        closedPanelWidth: 30,
        closedPanelHeight: 30,
        captionFadeDuration: 500,
        captionWidth: 300,
        captionHeight: 100,
        captionTop: 100,
        captionLeft: 30,
        shadow: false,
        linkTarget: "_blank",
        openPanelDelay: 200,
        panelProperties: null,
        panelMouseOver: null,
        panelMouseOut: null,
        panelClick: null,
        panelLoaded: null,
        panelCreated: null,
        allPanelsCreated: null,
        animationComplete: null,
        openPanel: null
    }
})(jQuery);